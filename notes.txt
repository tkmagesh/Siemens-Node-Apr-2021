Name
Primary Skillset
Total Experience
Node.js Experience

What is Node.js?
    JRE

C
~1980 - C++
1995 - Java, JavaScript, Ruby
1998 - C#, .NET

2008 - Node.js
    JavaScript
    Cross Platform
    Event Driven - Asynchronous
    Scalable

Extremely Less resources
    How?
    Single Threaded Event Loop

Reception
    1. Visitor
        Visitor Ledger
        Gadget Ledger
        Escorted
    2. Courier Guy
        Courier Ledger
    3. Associate
        Temp Badge Ledger


1. Single Threaded
        Blocking

        ( - ) Time consuming
        ( + ) Simplicity

2. Multi Threaded
        Blocking

        ( + ) Less time
        ( - ) Costly

3. Single Threaded
        Non Blocking
        Token - events
        Tray - Event Loop

        ( + ) Less time
        ( + ) Cost Efficient

        ( - )




50 - 5
500 - 50
1 Receptionist

REPL - Read Evaluate Print Loop

CommonJS
    Everything defined in a js file is considered private
    If anything need to be exposed to the outside world, it has to be explicitly exported
        module.exports = /* entity to be exported */
        The default value of module.exports is an empty object

    To use an entity from another file, it has to explicitly imported
        var <variable> = require('....js')

Modularity assignment
Create the following files as given below:

    accmulator.js
        //implement the accumulator based on the usage in the accmulator-client.js


    accmulator-client.js
        import accmulator
        acc.add(100)
        acc.subtract(50)
        acc.multiply(10)
        acc.divide(2)
        console.log(acc.getResult())  //=> ((100-50)*10)/2 => 250

Assignment
    Read the calculator.dat
    parse the lines
    call the calculator accordingly
    get result
    write the result in new file 'calculator-result.dat' in the follwing format
        add,10,20,30

    Version - 1
        use readFileSync()

    Version - 2
        use readFile()

    Version - 3
        use createReadStream()

Create a new server that can serve the following requests
    http://localhost:8080/calculator?x=100&y=200&op=add
    http://localhost:8080/calculator?x=100&y=200&op=subtract
    http://localhost:8080/calculator?x=100&y=200&op=multiply
    http://localhost:8080/calculator?x=100&y=200&op=divide

    hint:
        use 'new URL()' for parsing urls
        use 'querystring.parse()' for parsing querystring


Combine the functionality of 'web server' and 'calculator server'  in one server
    if req is for any static resource [html, js, css, jpg, png, ico, xml, txt, json]
        read the file and server it if the file exists
    if req is for '/calculator'
        process the incoming data for calculator
    else 
        send 404

Reorganise the web-calculator-server into the the following modules
    parsing incoming data
    serving static resources
    handling calculator requests
    serving 404

Assignments:
modify serve-static.js to receive the 'public folder path'
move the data parsing logic from serve-calculator.js to data-parser.js

package.json
    manifest file containing metadata information about the application
    name
    version
    author
    repository
    private
    license
    description
    keywords
    dependencies
    devDependencies
    scripts

npm - node package manager
npmjs.com

npm install <package_name>
npm install chalk